import numpy as np
import pandas as pd
import re
from sys import argv

def count_correction(region, year, working_df):
    return working_df[(working_df['Год'] >= year)&(working_df['Субъект'] == region)]['Поправка'].product()

script, file_path = argv

count_cols = ['Средняя численность населения', 'Средняя численность населения город', 'Средняя численность населения село', 'Средняя численность населения м',
 'Средняя численность населения ж', 'Поправка реальная', 'Темп прироста численности населения', 'Темп прироста численности населения город',
 'Темп прироста численности населения село', 'Темп прироста численности населения м', 'Темп прироста численности населения ж', 'Уровень демографической старости',
 'Уровень демографической старости город', 'Уровень демографической старости село', 'Коэффициент потенциального нагрузки', 'Коэффициент пенсионной нагрузки',
 'Коэффициент общей нагрузки', 'Коэффициент потенциального нагрузки город', 'Коэффициент пенсионной нагрузки город', 'Коэффициент общей нагрузки город',
 'Коэффициент потенциального нагрузки село', 'Коэффициент пенсионной нагрузки село', 'Коэффициент общей нагрузки село', 'Коэффициент Рябцева',
 'Коэффициент рождаемости', 'Коэффициент рождаемости город', 'Коэффициент рождаемости село', 'Коэффициент рождаемости м', 'Коэффициент рождаемости ж',
 'Специальный коэффициент рождаемости', 'Специальный коэффициент рождаемости город', 'Специальный коэффициент рождаемости село',
 'Специальный коэффициент рождаемости ж', 'Специальный коэффициент рождаемости м', 'TFR', 'TFR село', 'TFR город', 'Коэффициент прерывания беременности',
 'Коэффициент смертности', 'Коэффициент смертности город', 'Коэффициент смертности село', 'Коэффициент смертности м', 'Коэффициент смертности ж',
 'Коэффициент младенческой смертности', 'Коэффициент младенческой смертности город', 'Коэффициент младенческой смертности село',
 'Коэффициент младенческой смертности м', 'Коэффициент младенческой смертности ж', 'Индекс жизненности', 'Индекс жизненности город',
 'Индекс жизненности село', 'Коэффициент детности', 'Коэффициент детности город', 'Коэффициент детности село', 'Естественный прирост',
 'Естественный прирост город', 'Естественный прирост село', 'Естественный прирост м', 'Естественный прирост ж', 'Коэффициент естественного прироста',
 'Коэффициент естественного прироста город', 'Коэффициент естественного прироста село', 'Коэффициент естественного прироста м',
 'Коэффициент естественного прироста ж', 'Миграционный оборот', 'Миграционное сальдо', 'Коэффициент прибытия', 'Коэффициент выбытия',
 'Коэффициент миграционного оборота', 'Коэффициент миграционного сальдо', 'Коэффициент эффективности миграционного оборота', 'Относительное сальдо миграции',
 'Коэффициент миграционной нагрузки', 'Общий прирост', 'Коэффициент брачности', 'Коэффициент брачности город', 'Коэффициент брачности село',
 'Специальный коэффициент брачности', 'Специальный коэффициент брачности город', 'Специальный коэффициент брачности село', 'Коэффициент разводимости',
 'Коэффициент разводимости город', 'Коэффициент разводимости село', 'Индекс разводимости', 'Индекс разводимости город', 'Индекс разводимости село',
 'Брутто-коэффициент воспроизводства', 'Нетто-коэффициент воспроизводства', 'Длина поколения', 'Брутто-коэффициент воспроизводства село',
 'Нетто-коэффициент воспроизводства село', 'Длина поколения село', 'Брутто-коэффициент воспроизводства город', 'Нетто-коэффициент воспроизводства город',
 'Длина поколения город', 'Истинный коэффициент естественного прироста', 'Истинный коэффициент естественного прироста город',
 'Истинный коэффициент естественного прироста село', 'Компенсация возрастной структурой', 'Компенсация возрастной структурой город',
 'Компенсация возрастной структурой село', 'Плотность населения']

if not file_path:
    file_path = "./data/demographics.csv"
    
demo_df = pd.read_csv(file_path, sep=";", decimal=',', encoding='cp1251')

demo_df = demo_df.drop(columns=set(count_cols)-(set(count_cols)-set(demo_df.columns)))

##### Динамика численности населения
# Средняя численность населения
working_df = demo_df.set_index(['Год', 'Субъект'])[['Численность населения', 'Численность населения город', 'Численность населения село', 'Численность м', 'Численность ж']]
next_rows = pd.Series(working_df.index.values).apply(lambda x: (x[0]+1, x[1]) if (x[0]+1, x[1]) in working_df.index else np.NAN).dropna()
rows = pd.Series(working_df.index.values).apply(lambda x: (x[0], x[1]) if (x[0]+1, x[1]) in working_df.index else np.NAN).dropna()
working_df.loc[rows, 'Средняя численность населения'] =  (working_df.loc[next_rows, 'Численность населения'].values+working_df.loc[rows, 'Численность населения'])/2
working_df.loc[rows, 'Средняя численность населения город'] = (working_df.loc[next_rows]['Численность населения город'].values+working_df.loc[rows]['Численность населения город'])/2
working_df.loc[rows, 'Средняя численность населения село'] = (working_df.loc[next_rows]['Численность населения село'].values+working_df.loc[rows]['Численность населения село'])/2
working_df.loc[rows, 'Средняя численность населения м'] = (working_df.loc[next_rows]['Численность м'].values+working_df.loc[rows]['Численность м'])/2
working_df.loc[rows, 'Средняя численность населения ж'] = (working_df.loc[next_rows]['Численность ж'].values+working_df.loc[rows]['Численность ж'])/2
working_df = working_df.round().reset_index()
working_df = working_df.drop(columns=['Численность населения', 'Численность населения город', 'Численность населения село','Численность м', 'Численность ж'])
demo_df = demo_df.merge(working_df, on=['Субъект', 'Год'], how="outer")


# Сглаживание ряда
working_df = demo_df[['Год', 'Субъект', 'Численность населения', 'Число прибывших', 'Число выбывших', 'Число умерших', 'Число родившихся']]
working_df = working_df.set_index(['Год', 'Субъект'])
working_df['ОП'] = working_df['Число родившихся'] - working_df['Число умерших']+ working_df['Число прибывших'] - working_df['Число выбывших']
working_df['Численность населения следующий'] =  working_df['Численность населения'] +  working_df['ОП']
next_rows = pd.Series(working_df.index.values).apply(lambda x: (x[0]+1, x[1]) if (x[0]+1, x[1]) in working_df.index else np.NAN).dropna()
rows = pd.Series(working_df.index.values).apply(lambda x: (x[0], x[1]) if (x[0]+1, x[1]) in working_df.index else np.NAN).dropna()
working_df.loc[rows, 'Численность населения следующий реальная'] = working_df.loc[next_rows, 'Численность населения'].values
working_df['Поправка'] = working_df['Численность населения следующий реальная']/working_df['Численность населения следующий']
working_df['Поправка'] = working_df['Поправка'].fillna(1)
working_df = working_df.reset_index()
working_df['Поправка реальная'] = working_df.apply(lambda x: count_correction(x['Субъект'], x['Год'], working_df), axis=1)
demo_df['Поправка реальная'] = working_df['Поправка реальная']
cols = demo_df.columns[pd.Series(demo_df.columns).apply(lambda x: ('численность' in x.lower())|('число' in x.lower()))]
demo_df[cols] = demo_df[cols].mul(demo_df['Поправка реальная'], 0).round()


# ##### Темп прироста (сокращения) численности населения
working_df = demo_df.set_index(['Год', 'Субъект'])[['Численность населения', 'Численность населения город', 'Численность населения село', 'Численность м', 'Численность ж']]
next_rows = pd.Series(working_df.index.values).apply(lambda x: (x[0]+1, x[1]) if (x[0]+1, x[1]) in working_df.index else np.NAN).dropna()
rows = pd.Series(working_df.index.values).apply(lambda x: (x[0], x[1]) if (x[0]+1, x[1]) in working_df.index else np.NAN).dropna()
working_df.loc[next_rows, 'Темп прироста численности населения'] = (working_df.loc[next_rows, 'Численность населения']/working_df.loc[rows, 'Численность населения'].values-1)*100
working_df.loc[next_rows, 'Темп прироста численности населения город'] = (working_df.loc[next_rows]['Численность населения город']/working_df.loc[rows]['Численность населения город'].values-1)*100
working_df.loc[next_rows, 'Темп прироста численности населения село'] = (working_df.loc[next_rows]['Численность населения село']/working_df.loc[rows]['Численность населения село'].values-1)*100
working_df.loc[next_rows, 'Темп прироста численности населения м'] = (working_df.loc[next_rows]['Численность м']/working_df.loc[rows]['Численность м'].values-1)*100
working_df.loc[next_rows, 'Темп прироста численности населения ж'] = (working_df.loc[next_rows]['Численность ж']/working_df.loc[rows]['Численность ж'].values-1)*100
working_df = working_df.fillna(0).replace([np.inf, -np.inf], 100).reset_index()
working_df = working_df.drop(columns=['Численность населения', 'Численность населения город', 'Численность населения село','Численность м', 'Численность ж'])
demo_df = demo_df.merge(working_df, on=['Субъект', 'Год'], how="outer")


# ##### Показатели демографического старения и демографической нагрузки

demo_df = demo_df.copy()
demo_df['Уровень демографической старости'] = demo_df['Численность населения пожилое нетрудоспособное']/demo_df['Численность населения']*100
demo_df['Уровень демографической старости город'] = demo_df['Численность населения город пожилое нетрудоспособное']/demo_df['Численность населения город']*100
demo_df['Уровень демографической старости село'] = demo_df['Численность населения село пожилое нетрудоспособное']/demo_df['Численность населения село']*100
demo_df['Коэффициент потенциального нагрузки'] = demo_df['Численность населения молодое нетрудоспособное']/demo_df['Численность населения взрослое трудоспособное']*100
demo_df['Коэффициент пенсионной нагрузки'] = demo_df['Численность населения пожилое нетрудоспособное']/demo_df['Численность населения взрослое трудоспособное']*100
demo_df['Коэффициент общей нагрузки'] = (demo_df['Численность населения молодое нетрудоспособное'] + demo_df['Численность населения пожилое нетрудоспособное'])/demo_df['Численность населения взрослое трудоспособное']*100
demo_df['Коэффициент потенциального нагрузки город'] = demo_df['Численность населения город молодое нетрудоспособное']/demo_df['Численность населения город взрослое трудоспособное']*100
demo_df['Коэффициент пенсионной нагрузки город'] = demo_df['Численность населения город пожилое нетрудоспособное']/demo_df['Численность населения город взрослое трудоспособное']*100
demo_df['Коэффициент общей нагрузки город'] = (demo_df['Численность населения город молодое нетрудоспособное'] + demo_df['Численность населения город пожилое нетрудоспособное'])/demo_df['Численность населения город взрослое трудоспособное']*100
demo_df['Коэффициент потенциального нагрузки село'] = demo_df['Численность населения село молодое нетрудоспособное']/demo_df['Численность населения село взрослое трудоспособное']*100
demo_df['Коэффициент пенсионной нагрузки село'] = demo_df['Численность населения село пожилое нетрудоспособное']/demo_df['Численность населения село взрослое трудоспособное']*100
demo_df['Коэффициент общей нагрузки село'] = (demo_df['Численность населения село молодое нетрудоспособное'] + demo_df['Численность населения село пожилое нетрудоспособное'])/demo_df['Численность населения село взрослое трудоспособное']*100


# Оценка структуры населения
d1 = pd.DataFrame()
d0 = pd.DataFrame()
d1['1_1'] = demo_df[[f'Численность населения {i}-{i+4}' for i in range(15, 55, 5)]].sum(1)/demo_df['Численность населения']
d1['1_2'] = demo_df[[f'Численность населения {i}-{i+4}' for i in range(0, 11, 5)]].sum(1)/demo_df['Численность населения']
d1['1_3'] = demo_df[[f'Численность населения {i}-{i+4}' for i in range(55, 105, 5)]].sum(1)/demo_df['Численность населения']
d1[['Субъект', 'Год']] = demo_df[['Субъект', 'Год']]
d0['0_1'] = demo_df[demo_df['Год'] == 1990][[f'Численность населения {i}-{i+4}' for i in range(15, 55, 5)]].sum(1)/demo_df[demo_df['Год'] == 1990]['Численность населения']
d0['0_2'] = demo_df[demo_df['Год'] == 1990][[f'Численность населения {i}-{i+4}' for i in range(0, 11, 5)]].sum(1)/demo_df[demo_df['Год'] == 1990]['Численность населения']
d0['0_3'] = demo_df[demo_df['Год'] == 1990][[f'Численность населения {i}-{i+4}' for i in range(55, 105, 5)]].sum(1)/demo_df[demo_df['Год'] == 1990]['Численность населения']
d0['Субъект'] = demo_df['Субъект']
d1 = d1.merge(d0, on='Субъект')
d1['Коэффициент Рябцева'] = ((d1[['1_1', '1_2', '1_3']]-d1[['0_1', '0_2', '0_3']].values).pow(2).sum(1)/(d1[['1_1', '1_2', '1_3']]+d1[['0_1', '0_2', '0_3']].values).pow(2).sum(1)).pow(1/2)*100
demo_df = demo_df.merge(d1[['Субъект', 'Год','Коэффициент Рябцева']], on=['Субъект', 'Год'], how='left')


# #### Естественное движение населения
# ##### Общий коэффициент рождаемости
demo_df['Коэффициент рождаемости'] = demo_df['Число родившихся']/demo_df['Численность населения']*1000
demo_df['Коэффициент рождаемости город'] = demo_df['Число родившихся город']/demo_df['Численность населения город']*1000
demo_df['Коэффициент рождаемости село'] = demo_df['Число родившихся село'] /demo_df['Численность населения село']*1000
demo_df['Коэффициент рождаемости м'] = demo_df['Число родившихся м'] /demo_df['Численность м']*1000
demo_df['Коэффициент рождаемости ж'] = demo_df['Число родившихся ж'] /demo_df['Численность ж']*1000

# ##### Специальный коэффициент рождаемости
demo_df['Специальный коэффициент рождаемости'] = demo_df['Число родившихся']/demo_df[[f'Численность ж {i}-{i+4}' for i in range(15, 50, 5)]].sum(1)*1000
demo_df['Специальный коэффициент рождаемости город'] = demo_df['Число родившихся город']/demo_df[[f'Численность ж город {i}-{i+4}' for i in range(15, 50, 5)]].sum(1)*1000
demo_df['Специальный коэффициент рождаемости село'] = demo_df['Число родившихся село']/demo_df[[f'Численность ж село {i}-{i+4}' for i in range(15, 50, 5)]].sum(1)*1000
demo_df['Специальный коэффициент рождаемости ж'] = demo_df['Число родившихся ж']/demo_df[[f'Численность ж {i}-{i+4}' for i in range(15, 50, 5)]].sum(1)*1000
demo_df['Специальный коэффициент рождаемости м'] = demo_df['Число родившихся м']/demo_df[[f'Численность ж {i}-{i+4}' for i in range(15, 50, 5)]].sum(1)*1000
demo_df[['Специальный коэффициент рождаемости',
       'Специальный коэффициент рождаемости город',
       'Специальный коэффициент рождаемости село',
       'Специальный коэффициент рождаемости ж',
       'Специальный коэффициент рождаемости м']] = demo_df[['Специальный коэффициент рождаемости',
       'Специальный коэффициент рождаемости город',
       'Специальный коэффициент рождаемости село',
       'Специальный коэффициент рождаемости ж',
       'Специальный коэффициент рождаемости м']].replace([np.inf, -np.inf], 0)


# ##### Суммарный коэффициент рождаемости
cols =  [[f'F {i}-{i+4}' for i in range(15, 55, 5)], [f'F село {i}-{i+4}' for i in range(15, 55, 5)],[f'F город {i}-{i+4}' for i in range(15, 55, 5)]]
for col in cols:
    count_df = (demo_df[['Год','Субъект'] + col].set_index(['Год','Субъект']).stack().reset_index(name=('TFR'+' '+re.sub(r'\d+-\d+', '', col[0].split()[1])).strip()).groupby(['Субъект', 'Год']).sum()*5/1000).reset_index()
    demo_df = demo_df.merge(count_df, left_on=['Год', 'Субъект'], right_on=['Год', 'Субъект'], how="outer")


# ##### Коэффициент прерывания беременности
demo_df['Коэффициент прерывания беременности'] = demo_df['Число абортов']/demo_df[[f'Численность ж {i}-{i+4}' for i in range(15, 50, 5)]].sum(1)*1000


# ##### Общий коэффициент смертности
demo_df['Коэффициент смертности'] = demo_df['Число умерших']/demo_df['Численность населения']*1000
demo_df['Коэффициент смертности город'] = demo_df['Число умерших город']/demo_df['Численность населения город']*1000
demo_df['Коэффициент смертности село'] = demo_df['Число умерших село']/demo_df['Численность населения село']*1000
demo_df['Коэффициент смертности м'] = demo_df['Число умерших м']/demo_df['Численность м']*1000
demo_df['Коэффициент смертности ж'] = demo_df['Число умерших ж']/demo_df['Численность ж']*1000


# ##### Коэффициент младенческой смертности
working_df = demo_df.set_index(['Год', 'Субъект'])[['Число умерших младенцев', 'Число умерших младенцев город', 'Число умерших младенцев село', 'Число умерших младенцев м', 'Число умерших младенцев ж', 'Число родившихся', 'Число родившихся город','Число родившихся село', 'Число родившихся м','Число родившихся ж' ]]
next_rows = pd.Series(working_df.index.values).apply(lambda x: (x[0]+1, x[1]) if (x[0]+1, x[1]) in working_df.index else np.NAN).dropna()
rows = pd.Series(working_df.index.values).apply(lambda x: (x[0], x[1]) if (x[0]+1, x[1]) in working_df.index else np.NAN).dropna()
working_df.loc[next_rows, 'Коэффициент младенческой смертности'] = working_df.loc[next_rows]['Число умерших младенцев']/(2/3*working_df.loc[next_rows]['Число родившихся'].values+1/3*working_df.loc[rows]['Число родившихся'].values)*1000
working_df.loc[next_rows, 'Коэффициент младенческой смертности город'] = working_df.loc[next_rows]['Число умерших младенцев город']/(2/3*working_df.loc[next_rows]['Число родившихся город'].values+1/3*working_df.loc[rows]['Число родившихся город'].values)*1000
working_df.loc[next_rows, 'Коэффициент младенческой смертности село'] = working_df.loc[next_rows]['Число умерших младенцев село']/(2/3*working_df.loc[next_rows]['Число родившихся село'].values+1/3*working_df.loc[rows]['Число родившихся село'].values)*1000
working_df.loc[next_rows, 'Коэффициент младенческой смертности м'] = working_df.loc[next_rows]['Число умерших младенцев м']/(2/3*working_df.loc[next_rows]['Число родившихся м'].values+1/3*working_df.loc[rows]['Число родившихся м'].values)*1000
working_df.loc[next_rows, 'Коэффициент младенческой смертности ж'] = working_df.loc[next_rows]['Число умерших младенцев ж']/(2/3*working_df.loc[next_rows]['Число родившихся ж'].values+1/3*working_df.loc[rows]['Число родившихся ж'].values)*1000
working_df = working_df.round().reset_index()
working_df = working_df.drop(columns=['Число умерших младенцев', 'Число умерших младенцев город', 'Число умерших младенцев село', 'Число умерших младенцев м', 'Число умерших младенцев ж', 'Число родившихся', 'Число родившихся город','Число родившихся село', 'Число родившихся м','Число родившихся ж' ])
demo_df = demo_df.merge(working_df, on=['Субъект', 'Год'], how="outer")


# ##### Индекс жизненности
demo_df['Индекс жизненности'] = demo_df['Число родившихся']/demo_df['Число умерших']*100
demo_df['Индекс жизненности город'] = demo_df['Число родившихся город']/demo_df['Число умерших город']*100
demo_df['Индекс жизненности село'] = demo_df['Число родившихся село']/demo_df['Число умерших село']*100
demo_df[['Индекс жизненности', 'Индекс жизненности город', 'Индекс жизненности село']] = demo_df[['Индекс жизненности', 'Индекс жизненности город', 'Индекс жизненности село']].replace([np.inf, -np.inf], 0)


# ##### Коэффициент детности
demo_df['Коэффициент детности'] = (demo_df['Численность м 0-4']+demo_df['Численность ж 0-4'])/demo_df[[f'Численность ж {i}-{i+4}' for i in range(15, 50, 5)]].sum(1)
demo_df['Коэффициент детности город'] = (demo_df['Численность м город 0-4']+demo_df['Численность ж город 0-4'])/demo_df[[f'Численность ж город {i}-{i+4}' for i in range(15, 50, 5)]].sum(1)
demo_df['Коэффициент детности село'] = (demo_df['Численность м село 0-4']+demo_df['Численность ж село 0-4'])/demo_df[[f'Численность ж село {i}-{i+4}' for i in range(15, 50, 5)]].sum(1)


# ##### Естественный прирост населения
demo_df['Естественный прирост'] = demo_df['Число родившихся']-demo_df['Число умерших']
demo_df['Естественный прирост город'] = demo_df['Число родившихся город'] - demo_df['Число умерших город']
demo_df['Естественный прирост село'] =  demo_df['Число родившихся село'] - demo_df['Число умерших село']
demo_df['Естественный прирост м'] = demo_df['Число родившихся м'] - demo_df['Число умерших м']
demo_df['Естественный прирост ж'] =  demo_df['Число родившихся ж'] - demo_df['Число умерших ж']
demo_df['Коэффициент естественного прироста']=demo_df['Коэффициент рождаемости'] -demo_df['Коэффициент смертности'] 
demo_df['Коэффициент естественного прироста город']=demo_df['Коэффициент рождаемости город'] -demo_df['Коэффициент смертности город'] 
demo_df['Коэффициент естественного прироста село']=demo_df['Коэффициент рождаемости село'] -demo_df['Коэффициент смертности село'] 
demo_df['Коэффициент естественного прироста м']=demo_df['Коэффициент рождаемости м'] -demo_df['Коэффициент смертности м'] 
demo_df['Коэффициент естественного прироста ж']=demo_df['Коэффициент рождаемости ж'] -demo_df['Коэффициент смертности ж'] 


# #### Миграция


demo_df['Миграционный оборот'] = demo_df['Число прибывших']+demo_df['Число выбывших']
demo_df['Миграционное сальдо'] = demo_df['Число прибывших']-demo_df['Число выбывших']
demo_df['Коэффициент прибытия'] = demo_df['Число прибывших']/demo_df['Численность населения']*1000
demo_df['Коэффициент выбытия'] = demo_df['Число выбывших']/demo_df['Численность населения']*1000
demo_df['Коэффициент миграционного оборота'] = demo_df['Миграционный оборот']/demo_df['Численность населения']*1000
demo_df['Коэффициент миграционного сальдо'] = demo_df['Миграционное сальдо']/demo_df['Численность населения']*1000
demo_df['Коэффициент эффективности миграционного оборота'] = demo_df['Миграционное сальдо']/demo_df['Миграционный оборот']*100
demo_df['Относительное сальдо миграции'] =  demo_df['Число прибывших']/demo_df['Число выбывших']*100
demo_df['Коэффициент миграционной нагрузки'] =demo_df['Миграционное сальдо']/demo_df['Численность населения взрослое трудоспособное']*1000
demo_df['Общий прирост'] = demo_df['Естественный прирост']+demo_df['Миграционное сальдо']


# #### Брачность
# ##### Общий коэффициент брачности
demo_df['Коэффициент брачности'] = demo_df['Число браков']/demo_df['Численность населения']*1000
demo_df['Коэффициент брачности город'] = demo_df['Число браков город']/demo_df['Численность населения город']*1000
demo_df['Коэффициент брачности село'] = demo_df['Число браков село']/demo_df['Численность населения село']*1000
demo_df[['Коэффициент брачности', 'Коэффициент брачности город', 'Коэффициент брачности село']] = demo_df[['Коэффициент брачности', 'Коэффициент брачности город', 'Коэффициент брачности село']].replace([np.inf, -np.inf], 0)


# ##### Специальный коэффициент брачности
demo_df['Специальный коэффициент брачности'] = demo_df['Число браков']/(demo_df[[f'Численность ж {i}-{i+4}' for i in range(15, 105, 5)]].sum(1)+demo_df[[f'Численность м {i}-{i+4}' for i in range(15, 105, 5)]].sum(1))*1000
demo_df['Специальный коэффициент брачности город'] = demo_df['Число браков город']/(demo_df[[f'Численность ж город {i}-{i+4}' for i in range(15, 105, 5)]].sum(1)+demo_df[[f'Численность м город {i}-{i+4}' for i in range(15, 105, 5)]].sum(1))*1000
demo_df['Специальный коэффициент брачности село'] = demo_df['Число браков село']/(demo_df[[f'Численность ж село {i}-{i+4}' for i in range(15, 105, 5)]].sum(1)+demo_df[[f'Численность м село {i}-{i+4}' for i in range(15, 105, 5)]].sum(1))*1000
demo_df[['Специальный коэффициент брачности', 'Специальный коэффициент брачности город', 'Специальный коэффициент брачности село']] = demo_df[['Специальный коэффициент брачности', 'Специальный коэффициент брачности город', 'Специальный коэффициент брачности село']].replace([np.inf, -np.inf], 0)


# ##### Общий коэффициент разводимости
demo_df['Коэффициент разводимости'] = demo_df['Число разводов']/demo_df['Численность населения']*1000
demo_df['Коэффициент разводимости город'] = demo_df['Число разводов город']/demo_df['Численность населения город']*1000
demo_df['Коэффициент разводимости село'] = demo_df['Число разводов село']/demo_df['Численность населения село']*1000
demo_df[['Коэффициент разводимости', 'Коэффициент разводимости город', 'Коэффициент разводимости село']] = demo_df[['Коэффициент разводимости', 'Коэффициент разводимости город', 'Коэффициент разводимости село']].replace([np.inf, -np.inf], 0)


# ##### Индекс разводимости 
demo_df['Индекс разводимости'] = demo_df['Число разводов']/demo_df['Число браков']*100
demo_df['Индекс разводимости город'] = demo_df['Число разводов город']/demo_df['Число браков город']*100
demo_df['Индекс разводимости село'] = demo_df['Число разводов село']/demo_df['Число браков село']*100
demo_df[['Индекс разводимости', 'Индекс разводимости город', 'Индекс разводимости село']] = demo_df[['Индекс разводимости', 'Индекс разводимости город', 'Индекс разводимости село']].replace([np.inf, -np.inf], 0)


# #### Показатели замещения
death_tables = pd.read_csv("./data/Краткие таблицы смертности.csv", sep=";", decimal='.', encoding='cp1251')
count_df = demo_df[['Год','Субъект'] + [f'F {i}-{i+4}' for i in range(15, 55, 5)]].set_index(['Год','Субъект']).stack().reset_index().rename(columns={'level_2':'Возраст', 0:'F'})
count_df['Возраст'] = count_df['Возраст'].apply(lambda x: int(x.split('-')[0].replace('F ', '')))
working_df = death_tables[(death_tables['Пол'] == 'Женщины')&(death_tables['Тип'] == 'все население')&(death_tables['Возраст']>=15)&(death_tables['Возраст']<50)]
working_df = working_df.merge(count_df, on=['Год',	'Субъект', 'Возраст'])
working_df = working_df.merge(demo_df[['Год', 'Субъект', 'Число родившихся ж', 'Число родившихся']], on=['Год', 'Субъект'])
working_df = working_df.merge((35/working_df.groupby(['Субъект','Год']).count()['Возраст']).reset_index().rename(columns={'Возраст':'Шаг'}).astype(np.int64), on=['Субъект', 'Год'], how='left')
working_df['R1'] = working_df['Число родившихся ж']/working_df['Число родившихся']*working_df['F']/1000
working_df['R0'] = working_df['R1']*working_df['Число живущих']/(100000*working_df['Шаг'])
working_df['x'] = working_df['Возраст']+0.5*working_df['Шаг']
working_df['T'] = working_df['R0'] * working_df['x']
demo_df = demo_df.merge((working_df.groupby(['Субъект','Год']).sum()['R1']*working_df.groupby(['Субъект','Год']).max()['Шаг']).reset_index(name='Брутто-коэффициент воспроизводства'), on=['Субъект','Год'], how='left')
demo_df = demo_df.merge((working_df.groupby(['Субъект','Год']).sum()['R0']*working_df.groupby(['Субъект','Год']).max()['Шаг']).reset_index(name='Нетто-коэффициент воспроизводства'), on=['Субъект','Год'], how='left')
demo_df = demo_df.merge((5*working_df.groupby(['Субъект','Год']).sum()['T']/(working_df.groupby(['Субъект','Год']).sum()['R0']*working_df.groupby(['Субъект','Год']).max()['Шаг'])).reset_index(name='Длина поколения'), on=['Субъект','Год'], how='left')

count_df = demo_df[['Год','Субъект'] + [f'F село {i}-{i+4}' for i in range(15, 55, 5)]].set_index(['Год','Субъект']).stack().reset_index().rename(columns={'level_2':'Возраст', 0:'F'})
count_df['Возраст'] = count_df['Возраст'].apply(lambda x: int(x.split('-')[0].replace('F село ', '')))
working_df = death_tables[(death_tables['Пол'] == 'Женщины')&(death_tables['Тип'] == 'сельское население')&(death_tables['Возраст']>=15)&(death_tables['Возраст']<50)]
working_df = working_df.merge(count_df, on=['Год',	'Субъект', 'Возраст'])
working_df = working_df.merge(demo_df[['Год', 'Субъект', 'Число родившихся ж село', 'Число родившихся село']], on=['Год', 'Субъект'])
working_df = working_df.merge((35/working_df.groupby(['Субъект','Год']).count()['Возраст']).reset_index().rename(columns={'Возраст':'Шаг'}).astype(np.int64), on=['Субъект', 'Год'], how='left')
working_df['R1'] = working_df['Число родившихся ж село']/working_df['Число родившихся село']*working_df['F']/1000
working_df['R0'] = working_df['R1']*working_df['Число живущих']/(100000*working_df['Шаг'])
working_df['x'] = working_df['Возраст']+0.5*working_df['Шаг']
working_df['T'] = working_df['R0'] * working_df['x']
demo_df = demo_df.merge((working_df.groupby(['Субъект','Год']).sum()['R1']*working_df.groupby(['Субъект','Год']).max()['Шаг']).reset_index(name='Брутто-коэффициент воспроизводства село'), on=['Субъект','Год'], how='left')
demo_df = demo_df.merge((working_df.groupby(['Субъект','Год']).sum()['R0']*working_df.groupby(['Субъект','Год']).max()['Шаг']).reset_index(name='Нетто-коэффициент воспроизводства село'), on=['Субъект','Год'], how='left')
demo_df = demo_df.merge((5*working_df.groupby(['Субъект','Год']).sum()['T']/(working_df.groupby(['Субъект','Год']).sum()['R0']*working_df.groupby(['Субъект','Год']).max()['Шаг'])).reset_index(name='Длина поколения село'), on=['Субъект','Год'], how='left')

count_df = demo_df[['Год','Субъект'] + [f'F город {i}-{i+4}' for i in range(15, 55, 5)]].set_index(['Год','Субъект']).stack().reset_index().rename(columns={'level_2':'Возраст', 0:'F'})
count_df['Возраст'] = count_df['Возраст'].apply(lambda x: int(x.split('-')[0].replace('F город ', '')))
working_df = death_tables[(death_tables['Пол'] == 'Женщины')&(death_tables['Тип'] == 'городское население')&(death_tables['Возраст']>=15)&(death_tables['Возраст']<50)]
working_df = working_df.merge(count_df, on=['Год',	'Субъект', 'Возраст'])
working_df = working_df.merge(demo_df[['Год', 'Субъект', 'Число родившихся ж город', 'Число родившихся город']], on=['Год', 'Субъект'])
working_df = working_df.merge((35/working_df.groupby(['Субъект','Год']).count()['Возраст']).reset_index().rename(columns={'Возраст':'Шаг'}).astype(np.int64), on=['Субъект', 'Год'], how='left')
working_df['R1'] = working_df['Число родившихся ж город']/working_df['Число родившихся город']*working_df['F']/1000
working_df['R0'] = working_df['R1']*working_df['Число живущих']/(100000*working_df['Шаг'])
working_df['x'] = working_df['Возраст']+0.5*working_df['Шаг']
working_df['T'] = working_df['R0'] * working_df['x']
demo_df = demo_df.merge((working_df.groupby(['Субъект','Год']).sum()['R1']*working_df.groupby(['Субъект','Год']).max()['Шаг']).reset_index(name='Брутто-коэффициент воспроизводства город'), on=['Субъект','Год'], how='left')
demo_df = demo_df.merge((working_df.groupby(['Субъект','Год']).sum()['R0']*working_df.groupby(['Субъект','Год']).max()['Шаг']).reset_index(name='Нетто-коэффициент воспроизводства город'), on=['Субъект','Год'], how='left')
demo_df = demo_df.merge((5*working_df.groupby(['Субъект','Год']).sum()['T']/(working_df.groupby(['Субъект','Год']).sum()['R0']*working_df.groupby(['Субъект','Год']).max()['Шаг'])).reset_index(name='Длина поколения город'), on=['Субъект','Год'], how='left')


demo_df['Истинный коэффициент естественного прироста'] = np.log(demo_df['Нетто-коэффициент воспроизводства'])/demo_df['Длина поколения']*1000
demo_df['Истинный коэффициент естественного прироста город'] = np.log(demo_df['Нетто-коэффициент воспроизводства город'])/demo_df['Длина поколения город']*1000
demo_df['Истинный коэффициент естественного прироста село'] = np.log(demo_df['Нетто-коэффициент воспроизводства село'])/demo_df['Длина поколения село']*1000
demo_df['Компенсация возрастной структурой'] = demo_df['Истинный коэффициент естественного прироста'] - demo_df['Коэффициент естественного прироста']
demo_df['Компенсация возрастной структурой город'] = demo_df['Истинный коэффициент естественного прироста город'] - demo_df['Коэффициент естественного прироста город']
demo_df['Компенсация возрастной структурой село'] = demo_df['Истинный коэффициент естественного прироста село'] -demo_df['Коэффициент естественного прироста село']


# ##### Плотность населения
demo_df['Плотность населения'] = demo_df['Численность населения']/demo_df['Площадь']


demo_df.to_csv(file_path, sep=';', encoding='cp1251', index=False, decimal=',')